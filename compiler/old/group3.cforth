{ ************************************************************************* }
{ ***																	*** }
{ ***								Group 3 Words						*** }
{ ***																	*** }
{ ************************************************************************* }

{ *** Comparison routines. All leave # on stack if true *** }

:<		- 0< ;
:<=		- 0<= ;
:>		- 0> ;
:>=		- 0>= ;
:=		- 0= ;
:<> 	- 0= 0= ;

{ *** Memory subtract Operators *** }

:-! 	swap negate swap +! ;

{ *** Stack Operations *** }

:rot >r >r [[sysinfo]] ! r> r> [[sysinfo]] @ ;  

{ *** Read/Write far memory *** }

:farPageSelect variable private								{ page to read/write }

:farPage! farPageSelect ! ;									{ select a page }

:far! page@ >r farPageSelect @ page! ! r> page! ;		{ write word }

:far@ page@ >r farPageSelect @ page! @ r> page! ;		{ read word }

:farc! 	page@ >r farPageSelect @ page! 					{ save old page and switch } 
		swap $FF and over @ $FF00 and + swap ! 				{ update value }
		r>  page! ;										{ page back }

{ *** Multiplication (16 bit unsigned) *** }

:* 		0 multResult ! 
		*+ *+ *+ *+ *+ *+ *+ *+ 			{ do the shift/multiply stuff }
		*+ *+ *+ *+ *+ *+ *+ *+ 
		drop drop multResult @ ;

{ *** unsigned division *** }

{ this is okay for casual division but not for high speed division, especially }
{ if the Group 1/2 operators are not optimised. Currently division by zero }
{ returns $FFFF as the quotient }

:__quotient variable 							{ quotient value }
:__remainder variable  							{ remainder value }

:/												{ Numerator 2nd,Denominator top }
	0 __quotient !
	0 __remainder !
	16 for
		__remainder @ 2* __remainder !			{ shift remainder left}

		over 0< if 1 __remainder +! then 		{ if numerator -ve bump remainder }

		swap 2* swap 							{ shift numerator left }

		__quotient @ 2* __quotient ! 			{ shift quotient left }

		__remainder @ over >= if				{ if remainder >= denominator }
			dup __remainder -! 					{ subtract denominator from remainder }
			1 __quotient +! 					{ bump the quotient }
		then 
	next
	drop drop __quotient @						
;

:mod / drop __remainder @ ;


{ *** Fill memory *** }

:fill 	rot rot for over over c! 1+ next drop drop ; { address count character }

{ *** Move memory, simple copy *** }

:move 	for 										{ source destination count }
			over over swap c@ swap c! 
			1+ swap 1+ swap 
		next drop drop ;
