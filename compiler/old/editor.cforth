{ ************************************************************************* }
{ ***																	*** }
{ ***							Screen Editor							*** }
{ ***																	*** }
{ ************************************************************************* }

{ scWidth/scHeight }

:pad $5B00 ; 								{ Editing buffer }
:editSize 	variable 								{ number of bytes in edit space }
:editStart 	variable 								{ offset into screen for editing }
:editPos 	variable 								{ cursor position }
:eob 		$A0 ;

:clearBuffer 										{ clear buffer to spaces, ending in $A0 }
	pad editSize @ for i $7F and over ! 1+ next eob swap c! ;

:screenCopy 										{ copy to display screenaddr sourceaddr count - } 
	for 
		over over c@ swap screen! 1+ swap 1+ swap
	next drop drop ; private

:repaint 											{ repaint whole edit display }
	editStart @ pad editSize @ screenCopy ; private

:setCursor 											{ set cursor position }
	editStart @ editPos @ + cursor! ; private

:moveCursor editPos +! 								{ move cursor, force into limits }
			editPos @ 0 max editSize @ 1- min editPos ! ; private

:backSpace 											{ Delete code }
			editPos @ 0= if drop ;
			-1 editPos +! 
			editPos @ pad + 
			begin
				dup 1+ c@ over c! 1+ dup c@ eob = 
			until $20 swap 1- c!
			repaint ;
private

:insert 	editSize @ dup editPos @ - swap pad + 1- swap { work out position to copy from and count }
			for  										{ make space for new char }
				dup 1- c@ over c! 1-
			next drop
			$3F and editPos @ pad + c@ $C0 and +  		{ make 6 bit ASCII colour same as current }
			dup $3F and $20 = if drop $60 then 			{ space is stored as $60 whatever }
			editPos @ pad + c! 1 moveCursor repaint ; 	{ write into memory and repaint }
private

:editBuffer
 	repaint
	begin
		setCursor key
		dup 8 =  if backspace then 
		dup 9 =  if drop 1 ; 
		dup 20 = if scWidth negate moveCursor then 
		dup 21 = if scWidth moveCursor then 
		dup 22 = if -1 moveCursor then  
		dup 23 = if 1 moveCursor then
		dup 32 >= if dup insert then 
		13 = 
	until 0
;

:_main $ABCD
	80 editSize ! 20 editStart ! 

	screen top clearBuffer
	
	editBuffer

$FEDC [stop]

{ Todo: enter characters ; TAB key ; recolouring characters }